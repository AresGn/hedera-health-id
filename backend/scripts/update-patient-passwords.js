const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Mots de passe par d√©faut pour les patients existants
const DEFAULT_PASSWORDS = {
  'BJ2025001': 'patient123', // Adjoa KOSSOU
  'BJ2025002': 'patient456', // Marie DOSSOU  
  'BJ2025003': 'patient789', // Jean HOUNKPATIN
  'BJ20257830': 'test123'    // Patient Test
};

async function updatePatientPasswords() {
  console.log('üîê Mise √† jour des mots de passe des patients...');
  console.log('================================================');
  
  try {
    // R√©cup√©rer tous les patients
    const patients = await prisma.patient.findMany({
      select: {
        id: true,
        patientId: true,
        nom: true,
        prenom: true,
        passwordHash: true
      }
    });

    console.log(`üìä ${patients.length} patients trouv√©s`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const patient of patients) {
      try {
        // Forcer la mise √† jour de tous les patients pour assurer la coh√©rence
        console.log(`üîÑ Mise √† jour forc√©e pour ${patient.patientId} (${patient.prenom} ${patient.nom})`);

        // V√©rifier si le patient a d√©j√† un hash valide (pas un hash temporaire)
        // const hasValidHash = patient.passwordHash &&
        //                     !patient.passwordHash.startsWith('temp_hash_') &&
        //                     patient.passwordHash.length > 20;

        // if (hasValidHash) {
        //   console.log(`‚è≠Ô∏è  ${patient.patientId} (${patient.prenom} ${patient.nom}) - Hash d√©j√† valide`);
        //   continue;
        // }

        // Obtenir le mot de passe par d√©faut
        const defaultPassword = DEFAULT_PASSWORDS[patient.patientId] || 'patient123';
        
        // Hacher le mot de passe
        const saltRounds = 12;
        const passwordHash = await bcrypt.hash(defaultPassword, saltRounds);

        // Mettre √† jour le patient
        await prisma.patient.update({
          where: { id: patient.id },
          data: { passwordHash }
        });

        console.log(`‚úÖ ${patient.patientId} (${patient.prenom} ${patient.nom}) - Mot de passe: "${defaultPassword}"`);
        updatedCount++;

      } catch (error) {
        console.error(`‚ùå Erreur pour ${patient.patientId}:`, error.message);
        errorCount++;
      }
    }

    console.log('\n================================================');
    console.log('üìä R√âSUM√â DE LA MISE √Ä JOUR:');
    console.log(`   ‚úÖ Patients mis √† jour: ${updatedCount}`);
    console.log(`   ‚ùå Erreurs: ${errorCount}`);
    console.log(`   üìù Total trait√©: ${patients.length}`);

    if (updatedCount > 0) {
      console.log('\nüîë MOTS DE PASSE PAR D√âFAUT:');
      Object.entries(DEFAULT_PASSWORDS).forEach(([patientId, password]) => {
        console.log(`   ${patientId}: "${password}"`);
      });
    }

    console.log('\nüéâ Mise √† jour termin√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Fonction pour tester l'authentification
async function testAuthentication() {
  console.log('\nüß™ Test d\'authentification...');
  console.log('================================');

  try {
    for (const [patientId, password] of Object.entries(DEFAULT_PASSWORDS)) {
      const patient = await prisma.patient.findUnique({
        where: { patientId },
        select: { passwordHash: true, nom: true, prenom: true }
      });

      if (patient) {
        const isValid = await bcrypt.compare(password, patient.passwordHash);
        const status = isValid ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${patientId} (${patient.prenom} ${patient.nom}) - "${password}"`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le script
async function main() {
  await updatePatientPasswords();
  await testAuthentication();
}

if (require.main === module) {
  main();
}

module.exports = {
  updatePatientPasswords,
  testAuthentication,
  DEFAULT_PASSWORDS
};
