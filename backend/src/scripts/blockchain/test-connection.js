import 'dotenv/config';
import {
    Client,
    PrivateKey,
    AccountId,
    Hbar
} from "@hashgraph/sdk";

/**
 * Test simple de connexion Hedera
 */
async function testConnection() {
    console.log("üîç Test de connexion Hedera");
    console.log("=" .repeat(40));
    
    try {
        const operatorId = process.env.OPERATOR_ID;
        const operatorKey = process.env.OPERATOR_KEY;

        console.log(`Operator ID: ${operatorId}`);
        console.log(`Operator Key: ${operatorKey ? operatorKey.substring(0, 10) + '...' : 'NON D√âFINIE'}`);

        if (!operatorId || !operatorKey) {
            throw new Error("Variables d'environnement manquantes!");
        }

        // Test de parsing de la cl√© priv√©e
        let operatorPrivateKey;
        console.log("\nüîë Test de parsing de la cl√© priv√©e...");
        
        try {
            if (operatorKey.startsWith('0x')) {
                console.log("Format d√©tect√©: Hexad√©cimal avec pr√©fixe 0x");
                operatorPrivateKey = PrivateKey.fromStringECDSA(operatorKey.substring(2));
            } else if (operatorKey.length === 64) {
                console.log("Format d√©tect√©: Hexad√©cimal sans pr√©fixe");
                operatorPrivateKey = PrivateKey.fromStringECDSA(operatorKey);
            } else {
                console.log("Format d√©tect√©: DER standard");
                operatorPrivateKey = PrivateKey.fromString(operatorKey);
            }
            console.log("‚úÖ Cl√© priv√©e pars√©e avec succ√®s");
        } catch (error) {
            console.error("‚ùå Erreur de parsing de cl√©:", error.message);
            return;
        }

        // Test de cr√©ation du client
        console.log("\nüåê Test de cr√©ation du client...");
        const client = Client.forTestnet();
        console.log("‚úÖ Client cr√©√©");

        // Test de configuration de l'op√©rateur
        console.log("\nüë§ Test de configuration de l'op√©rateur...");
        client.setOperator(operatorId, operatorPrivateKey);
        console.log("‚úÖ Op√©rateur configur√©");

        // Test de configuration des frais
        console.log("\nüí∞ Test de configuration des frais...");
        client.setDefaultMaxTransactionFee(new Hbar(2));
        console.log("‚úÖ Frais configur√©s");

        // Test de v√©rification du solde
        console.log("\nüí≥ Test de v√©rification du solde...");
        try {
            const accountBalance = await client.getAccountBalance(operatorId);
            console.log(`‚úÖ Solde: ${accountBalance.hbars.toString()}`);
            
            if (accountBalance.hbars.toBigNumber().lt(1)) {
                console.warn("‚ö†Ô∏è Solde tr√®s faible!");
                console.warn("üí° Obtenez des HBAR testnet sur: https://portal.hedera.com/");
            }
        } catch (error) {
            console.error("‚ùå Erreur de v√©rification du solde:", error.message);
        }

        console.log("\nüéâ Test de connexion r√©ussi!");
        client.close();

    } catch (error) {
        console.error("‚ùå ERREUR:", error.message);
        console.error("Stack:", error.stack);
    }
}

testConnection();
