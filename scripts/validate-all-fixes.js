#!/usr/bin/env node

/**
 * Script de validation compl√®te pour toutes les corrections UI/UX et int√©gration de donn√©es
 * du projet Hedera Health ID
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Fonction pour afficher des logs color√©s
function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Fonction pour ex√©cuter des commandes
function execCommand(command, description, cwd = process.cwd()) {
  try {
    log(`üîÑ ${description}...`, 'blue');
    const result = execSync(command, { 
      stdio: 'pipe', 
      cwd: cwd,
      encoding: 'utf8'
    });
    log(`‚úÖ ${description} termin√©`, 'green');
    return result;
  } catch (error) {
    log(`‚ùå Erreur lors de ${description}: ${error.message}`, 'red');
    if (error.stdout) log(`Stdout: ${error.stdout}`, 'yellow');
    if (error.stderr) log(`Stderr: ${error.stderr}`, 'yellow');
    throw error;
  }
}

// Fonction pour v√©rifier les corrections de visibilit√© du texte
function validateTextVisibilityFixes() {
  log('üîç Validation des corrections de visibilit√© du texte...', 'cyan');
  
  const filesToCheck = [
    'frontend/src/components/ui/Input.tsx',
    'frontend/src/components/ui/Select.tsx',
    'frontend/src/pages/PatientLogin.tsx',
    'frontend/src/pages/NewConsultation.tsx',
    'frontend/src/components/patient/PatientOverview.tsx'
  ];

  let fixes = 0;
  let issues = 0;

  filesToCheck.forEach(file => {
    const fullPath = path.join(process.cwd(), file);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // V√©rifier les am√©liorations de contraste
      if (content.includes('text-gray-800') || content.includes('text-gray-900')) {
        fixes++;
        log(`  ‚úÖ ${file}: Contraste am√©lior√©`, 'green');
      }
      
      // V√©rifier les probl√®mes restants
      if (content.includes('text-gray-500') && !content.includes('placeholder:text-gray-500')) {
        issues++;
        log(`  ‚ö†Ô∏è ${file}: text-gray-500 d√©tect√© (peut n√©cessiter une r√©vision)`, 'yellow');
      }
    } else {
      log(`  ‚ùå ${file}: Fichier non trouv√©`, 'red');
      issues++;
    }
  });

  log(`üìä Corrections de visibilit√©: ${fixes} am√©liorations, ${issues} probl√®mes potentiels`, 'cyan');
  return { fixes, issues };
}

// Fonction pour valider la responsivit√©
function validateResponsiveDesign() {
  log('üì± Validation du design responsive...', 'cyan');
  
  const responsiveFiles = [
    'frontend/src/pages/MedecinDashboardNew.tsx',
    'frontend/src/styles/index.css'
  ];

  let responsiveFixes = 0;

  responsiveFiles.forEach(file => {
    const fullPath = path.join(process.cwd(), file);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // V√©rifier les classes responsive
      if (content.includes('lg:') || content.includes('md:') || content.includes('sm:')) {
        responsiveFixes++;
        log(`  ‚úÖ ${file}: Classes responsive d√©tect√©es`, 'green');
      }
      
      // V√©rifier le menu mobile
      if (content.includes('sidebarOpen') || content.includes('Menu')) {
        log(`  ‚úÖ ${file}: Menu mobile impl√©ment√©`, 'green');
      }
    }
  });

  log(`üìä Design responsive: ${responsiveFixes} am√©liorations d√©tect√©es`, 'cyan');
  return responsiveFixes;
}

// Fonction pour valider l'int√©gration API
function validateApiIntegration() {
  log('üîå Validation de l\'int√©gration API...', 'cyan');
  
  const apiFiles = [
    'frontend/src/services/api.ts',
    'frontend/src/pages/PatientDashboard.tsx',
    'backend/api/index.ts'
  ];

  let apiImprovements = 0;

  apiFiles.forEach(file => {
    const fullPath = path.join(process.cwd(), file);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // V√©rifier les nouveaux endpoints
      if (content.includes('getPatientById') || content.includes('getPatientConsultations')) {
        apiImprovements++;
        log(`  ‚úÖ ${file}: Nouveaux endpoints d√©tect√©s`, 'green');
      }
      
      // V√©rifier l'utilisation de vraies donn√©es
      if (content.includes('api.getPatientById') || content.includes('patientResponse.data')) {
        log(`  ‚úÖ ${file}: Utilisation de vraies donn√©es API`, 'green');
      }
    }
  });

  log(`üìä Int√©gration API: ${apiImprovements} am√©liorations d√©tect√©es`, 'cyan');
  return apiImprovements;
}

// Fonction pour tester les builds
function testBuilds() {
  log('üèóÔ∏è Test des builds...', 'cyan');
  
  try {
    // Test build frontend
    log('Frontend build...', 'blue');
    execCommand('npm run build', 'Build frontend', path.join(process.cwd(), 'frontend'));
    
    // Test build backend
    log('Backend build...', 'blue');
    execCommand('npm run build', 'Build backend', path.join(process.cwd(), 'backend'));
    
    log('‚úÖ Tous les builds r√©ussis', 'green');
    return true;
  } catch (error) {
    log('‚ùå √âchec des builds', 'red');
    return false;
  }
}

// Fonction pour tester la base de donn√©es
async function testDatabase() {
  log('üóÑÔ∏è Test de la base de donn√©es...', 'cyan');
  
  try {
    // Ex√©cuter le script de v√©rification de la base de donn√©es
    execCommand('node scripts/ensure-database-setup.js', 'V√©rification base de donn√©es', path.join(process.cwd(), 'backend'));
    
    log('‚úÖ Base de donn√©es valid√©e', 'green');
    return true;
  } catch (error) {
    log('‚ùå Probl√®me avec la base de donn√©es', 'red');
    return false;
  }
}

// Fonction pour g√©n√©rer un rapport de validation
function generateValidationReport(results) {
  log('\nüìã RAPPORT DE VALIDATION COMPLET', 'magenta');
  log('================================================', 'magenta');
  
  const { textVisibility, responsive, api, builds, database } = results;
  
  log('üé® CORRECTIONS UI/UX:', 'cyan');
  log(`   ‚úÖ Visibilit√© du texte: ${textVisibility.fixes} corrections`, 'green');
  log(`   ‚ö†Ô∏è Probl√®mes restants: ${textVisibility.issues}`, textVisibility.issues > 0 ? 'yellow' : 'green');
  log(`   üì± Design responsive: ${responsive} am√©liorations`, 'green');
  
  log('\nüîå INT√âGRATION DONN√âES:', 'cyan');
  log(`   ‚úÖ API am√©liorations: ${api}`, 'green');
  log(`   ‚úÖ Builds: ${builds ? 'R√©ussis' : '√âchec'}`, builds ? 'green' : 'red');
  log(`   ‚úÖ Base de donn√©es: ${database ? 'Valid√©e' : 'Probl√®me'}`, database ? 'green' : 'red');
  
  const totalScore = textVisibility.fixes + responsive + api + (builds ? 5 : 0) + (database ? 5 : 0);
  const maxScore = 20; // Score maximum possible
  const percentage = Math.round((totalScore / maxScore) * 100);
  
  log(`\nüèÜ SCORE GLOBAL: ${totalScore}/${maxScore} (${percentage}%)`, percentage >= 80 ? 'green' : percentage >= 60 ? 'yellow' : 'red');
  
  if (percentage >= 80) {
    log('üéâ EXCELLENT! Toutes les corrections sont bien impl√©ment√©es', 'green');
  } else if (percentage >= 60) {
    log('üëç BON! La plupart des corrections sont en place', 'yellow');
  } else {
    log('‚ö†Ô∏è ATTENTION! Plusieurs corrections n√©cessitent encore du travail', 'red');
  }
  
  log('\nüìù PROCHAINES √âTAPES RECOMMAND√âES:', 'cyan');
  if (textVisibility.issues > 0) {
    log('   ‚Ä¢ R√©viser les instances restantes de text-gray-500', 'yellow');
  }
  if (!builds) {
    log('   ‚Ä¢ Corriger les erreurs de build', 'yellow');
  }
  if (!database) {
    log('   ‚Ä¢ R√©soudre les probl√®mes de base de donn√©es', 'yellow');
  }
  log('   ‚Ä¢ Tester manuellement tous les dashboards', 'blue');
  log('   ‚Ä¢ Valider l\'exp√©rience utilisateur sur mobile', 'blue');
  
  return { totalScore, maxScore, percentage };
}

// Fonction principale
async function main() {
  try {
    log('üöÄ D√âMARRAGE DE LA VALIDATION COMPL√àTE', 'magenta');
    log('================================================', 'magenta');
    
    // 1. Valider les corrections de visibilit√© du texte
    const textVisibility = validateTextVisibilityFixes();
    
    // 2. Valider le design responsive
    const responsive = validateResponsiveDesign();
    
    // 3. Valider l'int√©gration API
    const api = validateApiIntegration();
    
    // 4. Tester les builds
    const builds = testBuilds();
    
    // 5. Tester la base de donn√©es
    const database = await testDatabase();
    
    // 6. G√©n√©rer le rapport final
    const report = generateValidationReport({
      textVisibility,
      responsive,
      api,
      builds,
      database
    });
    
    log('\n‚úÖ VALIDATION TERMIN√âE', 'green');
    
    // Code de sortie bas√© sur le score
    process.exit(report.percentage >= 60 ? 0 : 1);
    
  } catch (error) {
    log(`‚ùå Erreur lors de la validation: ${error.message}`, 'red');
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { 
  validateTextVisibilityFixes, 
  validateResponsiveDesign, 
  validateApiIntegration,
  testBuilds,
  testDatabase,
  generateValidationReport
};
